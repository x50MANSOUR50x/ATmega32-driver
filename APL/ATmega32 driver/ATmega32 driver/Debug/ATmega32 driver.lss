
ATmega32 driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000452  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004a6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e88  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007cf  00000000  00000000  00001494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000840  00000000  00000000  00001c63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  000024a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e2  00000000  00000000  0000266c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a09  00000000  00000000  00002b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00003557  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 8d 01 	call	0x31a	; 0x31a <main>
  7a:	0c 94 27 02 	jmp	0x44e	; 0x44e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDir>:
#include "Definitions.h"
#include "DIO_interface.h"
#include "DIO_registers.h"
void DIO_SetPinDir (uint8_t port,uint8_t pin, uint8_t dir)
{
	switch(port)
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	19 f1       	breq	.+70     	; 0xcc <DIO_SetPinDir+0x4a>
  86:	18 f4       	brcc	.+6      	; 0x8e <DIO_SetPinDir+0xc>
  88:	81 34       	cpi	r24, 0x41	; 65
  8a:	39 f0       	breq	.+14     	; 0x9a <DIO_SetPinDir+0x18>
  8c:	08 95       	ret
  8e:	83 34       	cpi	r24, 0x43	; 67
  90:	b1 f1       	breq	.+108    	; 0xfe <DIO_SetPinDir+0x7c>
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_SetPinDir+0x16>
  96:	4c c0       	rjmp	.+152    	; 0x130 <DIO_SetPinDir+0xae>
  98:	08 95       	ret
	{
	    //portA
		case porta:
		if(dir==OUTPUT)
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	59 f4       	brne	.+22     	; 0xb4 <DIO_SetPinDir+0x32>
		{
			//DDRA|=(1<<pin);
			Bit_Set(DDRA,pin);
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_SetPinDir+0x28>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_SetPinDir+0x24>
  ae:	82 2b       	or	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
		}
		else
		{
			//DDRA&=~(1<<pin);
			Bit_Clear(DDRA,pin);
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_SetPinDir+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_SetPinDir+0x3a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
		}
		break;
		//portB
		case portb:
		if(dir==OUTPUT)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	59 f4       	brne	.+22     	; 0xe6 <DIO_SetPinDir+0x64>
		{
			//DDRB|=(1<<pin);
		    Bit_Set(DDRB,pin);
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_SetPinDir+0x5a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_SetPinDir+0x56>
  e0:	82 2b       	or	r24, r18
  e2:	87 bb       	out	0x17, r24	; 23
  e4:	08 95       	ret
		}
		else
		{
			//DDRB&=~(1<<pin);
			Bit_Clear(DDRB,pin);
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_SetPinDir+0x70>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_SetPinDir+0x6c>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
		}
		break;
		//portC
		case portc:
		if(dir==OUTPUT)
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	59 f4       	brne	.+22     	; 0x118 <DIO_SetPinDir+0x96>
		{
			//DDRC|=(1<<pin);
			Bit_Set(DDRC,pin);
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_SetPinDir+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_SetPinDir+0x88>
 112:	82 2b       	or	r24, r18
 114:	84 bb       	out	0x14, r24	; 20
 116:	08 95       	ret
		}
		else
		{
			//DDRC&=~(1<<pin);
			Bit_Clear(DDRC,pin);
 118:	24 b3       	in	r18, 0x14	; 20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SetPinDir+0xa2>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SetPinDir+0x9e>
 128:	80 95       	com	r24
 12a:	82 23       	and	r24, r18
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
		}
		break;
		//portD
		case portd:
		if(dir==OUTPUT)
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	59 f4       	brne	.+22     	; 0x14a <DIO_SetPinDir+0xc8>
		{
			//DDRD|=(1<<pin);
			Bit_Set(DDRD,pin);
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinDir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinDir+0xba>
 144:	82 2b       	or	r24, r18
 146:	81 bb       	out	0x11, r24	; 17
 148:	08 95       	ret
		}
		else
		{
			//DDRD&=~(1<<pin);
			Bit_Clear(DDRD,pin);
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_SetPinDir+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_SetPinDir+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_WritePin>:
		break;
	}
}
void DIO_WritePin (uint8_t port,uint8_t pin, uint8_t val)
{
	switch(port)
 162:	82 34       	cpi	r24, 0x42	; 66
 164:	19 f1       	breq	.+70     	; 0x1ac <DIO_WritePin+0x4a>
 166:	18 f4       	brcc	.+6      	; 0x16e <DIO_WritePin+0xc>
 168:	81 34       	cpi	r24, 0x41	; 65
 16a:	39 f0       	breq	.+14     	; 0x17a <DIO_WritePin+0x18>
 16c:	08 95       	ret
 16e:	83 34       	cpi	r24, 0x43	; 67
 170:	b1 f1       	breq	.+108    	; 0x1de <DIO_WritePin+0x7c>
 172:	84 34       	cpi	r24, 0x44	; 68
 174:	09 f4       	brne	.+2      	; 0x178 <DIO_WritePin+0x16>
 176:	4c c0       	rjmp	.+152    	; 0x210 <DIO_WritePin+0xae>
 178:	08 95       	ret
	{
		//portA
		case porta:
		if(val==OUTPUT)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	59 f4       	brne	.+22     	; 0x194 <DIO_WritePin+0x32>
		{
			//PORTA|=(1<<pin);
			Bit_Set(PORTA,pin);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_WritePin+0x28>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_WritePin+0x24>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
 192:	08 95       	ret
		}
		else
		{
			//PORTA&=~(1<<pin);
			Bit_Clear(PORTA,pin);
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_WritePin+0x3e>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_WritePin+0x3a>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
		}
		break;
		//portB
		case portb:
		if(val==OUTPUT)
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <DIO_WritePin+0x64>
		{
			//PORTB|=(1<<pin);
			Bit_Set(PORTB,pin);
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_WritePin+0x5a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_WritePin+0x56>
 1c0:	82 2b       	or	r24, r18
 1c2:	88 bb       	out	0x18, r24	; 24
 1c4:	08 95       	ret
		}
		else
		{
			//PORTB&=~(1<<pin);
			Bit_Clear(PORTB,pin);
 1c6:	28 b3       	in	r18, 0x18	; 24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_WritePin+0x70>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_WritePin+0x6c>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
		}
		break;
		//portC
		case portc:
		if(val==OUTPUT)
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	59 f4       	brne	.+22     	; 0x1f8 <DIO_WritePin+0x96>
		{
			//PORTC|=(1<<pin);
			Bit_Set(PORTC,pin);
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_WritePin+0x8c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_WritePin+0x88>
 1f2:	82 2b       	or	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	08 95       	ret
		}
		else
		{
			//PORTC&=~(1<<pin);
			Bit_Clear(PORTC,pin);
 1f8:	25 b3       	in	r18, 0x15	; 21
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_WritePin+0xa2>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_WritePin+0x9e>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
		}
		break;
		//portD
		case portd:
		if(val==OUTPUT)
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	59 f4       	brne	.+22     	; 0x22a <DIO_WritePin+0xc8>
		{
			//PORTD|=(1<<pin);
			Bit_Set(PORTD,pin);
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_WritePin+0xbe>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_WritePin+0xba>
 224:	82 2b       	or	r24, r18
 226:	82 bb       	out	0x12, r24	; 18
 228:	08 95       	ret
		}
		else
		{
			//PORTD&=~(1<<pin);
			Bit_Clear(PORTD,pin);
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_WritePin+0xd4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_WritePin+0xd0>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret

00000242 <EXTI_vEnable>:
#include "EXTI_interface.h"


void EXTI_vEnable(unsigned char EXTI_PIN)
{
	switch(EXTI_PIN)
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	41 f0       	breq	.+16     	; 0x256 <EXTI_vEnable+0x14>
 246:	18 f0       	brcs	.+6      	; 0x24e <EXTI_vEnable+0xc>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	49 f0       	breq	.+18     	; 0x25e <EXTI_vEnable+0x1c>
 24c:	08 95       	ret
	{
		case 0:
		Bit_Set(GICR,INT0);
 24e:	8b b7       	in	r24, 0x3b	; 59
 250:	80 64       	ori	r24, 0x40	; 64
 252:	8b bf       	out	0x3b, r24	; 59
		break;
 254:	08 95       	ret
		case 1:
		Bit_Set(GICR,INT1);
 256:	8b b7       	in	r24, 0x3b	; 59
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8b bf       	out	0x3b, r24	; 59
		break;
 25c:	08 95       	ret
		case 2:
		Bit_Set(GICR,INT2);
 25e:	8b b7       	in	r24, 0x3b	; 59
 260:	80 62       	ori	r24, 0x20	; 32
 262:	8b bf       	out	0x3b, r24	; 59
 264:	08 95       	ret

00000266 <EXTI_vActiveMode>:
	}
}

void EXTI_vActiveMode(unsigned char EXTI_PIN,unsigned char EXTI_MODE)
{ 
	if (EXTI_MODE == FALLING   && EXTI_PIN ==EXTI0)
 266:	61 11       	cpse	r22, r1
 268:	0c c0       	rjmp	.+24     	; 0x282 <EXTI_vActiveMode+0x1c>
 26a:	81 11       	cpse	r24, r1
 26c:	0a c0       	rjmp	.+20     	; 0x282 <EXTI_vActiveMode+0x1c>
	{
		Bit_Set(SREG,7);
 26e:	8f b7       	in	r24, 0x3f	; 63
 270:	80 68       	ori	r24, 0x80	; 128
 272:	8f bf       	out	0x3f, r24	; 63
		Bit_Set(MCUCR,ISC01);
 274:	85 b7       	in	r24, 0x35	; 53
 276:	82 60       	ori	r24, 0x02	; 2
 278:	85 bf       	out	0x35, r24	; 53
		Bit_Clear(MCUCR,ISC00);
 27a:	85 b7       	in	r24, 0x35	; 53
 27c:	8e 7f       	andi	r24, 0xFE	; 254
 27e:	85 bf       	out	0x35, r24	; 53
 280:	08 95       	ret
	}
    else if (EXTI_MODE == RISING   && EXTI_PIN ==EXTI0)
 282:	61 30       	cpi	r22, 0x01	; 1
 284:	61 f4       	brne	.+24     	; 0x29e <EXTI_vActiveMode+0x38>
 286:	81 11       	cpse	r24, r1
 288:	0a c0       	rjmp	.+20     	; 0x29e <EXTI_vActiveMode+0x38>
    {
		Bit_Set(SREG,7);
 28a:	8f b7       	in	r24, 0x3f	; 63
 28c:	80 68       	ori	r24, 0x80	; 128
 28e:	8f bf       	out	0x3f, r24	; 63
		Bit_Set(MCUCR,ISC01);
 290:	85 b7       	in	r24, 0x35	; 53
 292:	82 60       	ori	r24, 0x02	; 2
 294:	85 bf       	out	0x35, r24	; 53
		Bit_Set(MCUCR,ISC00);
 296:	85 b7       	in	r24, 0x35	; 53
 298:	81 60       	ori	r24, 0x01	; 1
 29a:	85 bf       	out	0x35, r24	; 53
 29c:	08 95       	ret
    }
    else if (EXTI_MODE == FALLING   && EXTI_PIN ==EXTI1)
 29e:	61 11       	cpse	r22, r1
 2a0:	0c c0       	rjmp	.+24     	; 0x2ba <EXTI_vActiveMode+0x54>
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	51 f4       	brne	.+20     	; 0x2ba <EXTI_vActiveMode+0x54>
    { 
		Bit_Set(SREG,7);
 2a6:	8f b7       	in	r24, 0x3f	; 63
 2a8:	80 68       	ori	r24, 0x80	; 128
 2aa:	8f bf       	out	0x3f, r24	; 63
	    Bit_Set(MCUCR,ISC11);
 2ac:	85 b7       	in	r24, 0x35	; 53
 2ae:	88 60       	ori	r24, 0x08	; 8
 2b0:	85 bf       	out	0x35, r24	; 53
	    Bit_Clear(MCUCR,ISC10);   
 2b2:	85 b7       	in	r24, 0x35	; 53
 2b4:	8b 7f       	andi	r24, 0xFB	; 251
 2b6:	85 bf       	out	0x35, r24	; 53
 2b8:	08 95       	ret
    }	
    else if (EXTI_MODE == RISING   && EXTI_PIN ==EXTI1)
 2ba:	61 30       	cpi	r22, 0x01	; 1
 2bc:	61 f4       	brne	.+24     	; 0x2d6 <EXTI_vActiveMode+0x70>
 2be:	81 30       	cpi	r24, 0x01	; 1
 2c0:	51 f4       	brne	.+20     	; 0x2d6 <EXTI_vActiveMode+0x70>
    {
		Bit_Set(SREG,7);
 2c2:	8f b7       	in	r24, 0x3f	; 63
 2c4:	80 68       	ori	r24, 0x80	; 128
 2c6:	8f bf       	out	0x3f, r24	; 63
	    Bit_Set(MCUCR,ISC10);
 2c8:	85 b7       	in	r24, 0x35	; 53
 2ca:	84 60       	ori	r24, 0x04	; 4
 2cc:	85 bf       	out	0x35, r24	; 53
	    Bit_Set(MCUCR,ISC11);
 2ce:	85 b7       	in	r24, 0x35	; 53
 2d0:	88 60       	ori	r24, 0x08	; 8
 2d2:	85 bf       	out	0x35, r24	; 53
 2d4:	08 95       	ret
    }
    else if (EXTI_MODE == FALLING   && EXTI_PIN ==EXTI2)
 2d6:	61 11       	cpse	r22, r1
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <EXTI_vActiveMode+0x86>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	39 f4       	brne	.+14     	; 0x2ec <EXTI_vActiveMode+0x86>
    {
		Bit_Set(SREG,7);
 2de:	8f b7       	in	r24, 0x3f	; 63
 2e0:	80 68       	ori	r24, 0x80	; 128
 2e2:	8f bf       	out	0x3f, r24	; 63
        Bit_Set(MCUCSR,ISC2);
 2e4:	84 b7       	in	r24, 0x34	; 52
 2e6:	80 64       	ori	r24, 0x40	; 64
 2e8:	84 bf       	out	0x34, r24	; 52
 2ea:	08 95       	ret
    }
    else if (EXTI_MODE == RISING   && EXTI_PIN ==EXTI2)
 2ec:	61 30       	cpi	r22, 0x01	; 1
 2ee:	41 f4       	brne	.+16     	; 0x300 <EXTI_vActiveMode+0x9a>
 2f0:	82 30       	cpi	r24, 0x02	; 2
 2f2:	31 f4       	brne	.+12     	; 0x300 <EXTI_vActiveMode+0x9a>
    {
		Bit_Set(SREG,7);
 2f4:	8f b7       	in	r24, 0x3f	; 63
 2f6:	80 68       	ori	r24, 0x80	; 128
 2f8:	8f bf       	out	0x3f, r24	; 63
        Bit_Clear(MCUCSR,ISC2);
 2fa:	84 b7       	in	r24, 0x34	; 52
 2fc:	8f 7b       	andi	r24, 0xBF	; 191
 2fe:	84 bf       	out	0x34, r24	; 52
 300:	08 95       	ret

00000302 <LED_Init>:
/**********************************************************************************************/
#include "DIO_interface.h"
#include "Definitions.h"
void LED_Init(uint8_t port,uint8_t pin)
{
	DIO_SetPinDir(port,pin,OUTPUT);
 302:	41 e0       	ldi	r20, 0x01	; 1
 304:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 308:	08 95       	ret

0000030a <LED_On>:
}
void LED_On(uint8_t port,uint8_t pin)
{
	DIO_WritePin(port,pin,1);
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 310:	08 95       	ret

00000312 <LED_Off>:
}
void LED_Off(uint8_t port,uint8_t pin)
{
	DIO_WritePin(port,pin,0);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 318:	08 95       	ret

0000031a <main>:
#include "EXTI_interface.h"


int main(void)
{
	LED_Init(porta, pin0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	81 e4       	ldi	r24, 0x41	; 65
 31e:	0e 94 81 01 	call	0x302	; 0x302 <LED_Init>
	LED_Init(porta, pin7);
 322:	67 e0       	ldi	r22, 0x07	; 7
 324:	81 e4       	ldi	r24, 0x41	; 65
 326:	0e 94 81 01 	call	0x302	; 0x302 <LED_Init>
	EXTI_vEnable(EXTI0);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 21 01 	call	0x242	; 0x242 <EXTI_vEnable>
	EXTI_vActiveMode(EXTI0, RISING);
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 33 01 	call	0x266	; 0x266 <EXTI_vActiveMode>
    while (1) 
    {
		LED_On(porta, pin0);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	81 e4       	ldi	r24, 0x41	; 65
 33c:	0e 94 85 01 	call	0x30a	; 0x30a <LED_On>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	2f ef       	ldi	r18, 0xFF	; 255
 342:	89 e6       	ldi	r24, 0x69	; 105
 344:	98 e1       	ldi	r25, 0x18	; 24
 346:	21 50       	subi	r18, 0x01	; 1
 348:	80 40       	sbci	r24, 0x00	; 0
 34a:	90 40       	sbci	r25, 0x00	; 0
 34c:	e1 f7       	brne	.-8      	; 0x346 <main+0x2c>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <main+0x36>
 350:	00 00       	nop
		_delay_ms(1000);
		LED_Off(porta, pin0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	81 e4       	ldi	r24, 0x41	; 65
 356:	0e 94 89 01 	call	0x312	; 0x312 <LED_Off>
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	89 e6       	ldi	r24, 0x69	; 105
 35e:	98 e1       	ldi	r25, 0x18	; 24
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <main+0x46>
 368:	00 c0       	rjmp	.+0      	; 0x36a <main+0x50>
 36a:	00 00       	nop
 36c:	e5 cf       	rjmp	.-54     	; 0x338 <main+0x1e>

0000036e <__vector_1>:
		_delay_ms(1000);
	}
}

ISR(INT0_vect)
{
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
	// EXTI_vDisable(EXTI0);
	LED_On(porta, pin7);
 390:	67 e0       	ldi	r22, 0x07	; 7
 392:	81 e4       	ldi	r24, 0x41	; 65
 394:	0e 94 85 01 	call	0x30a	; 0x30a <LED_On>
 398:	2f ef       	ldi	r18, 0xFF	; 255
 39a:	89 e6       	ldi	r24, 0x69	; 105
 39c:	98 e1       	ldi	r25, 0x18	; 24
 39e:	21 50       	subi	r18, 0x01	; 1
 3a0:	80 40       	sbci	r24, 0x00	; 0
 3a2:	90 40       	sbci	r25, 0x00	; 0
 3a4:	e1 f7       	brne	.-8      	; 0x39e <__vector_1+0x30>
 3a6:	00 c0       	rjmp	.+0      	; 0x3a8 <__vector_1+0x3a>
 3a8:	00 00       	nop
	_delay_ms(1000);
	LED_Off(porta, pin7);
 3aa:	67 e0       	ldi	r22, 0x07	; 7
 3ac:	81 e4       	ldi	r24, 0x41	; 65
 3ae:	0e 94 89 01 	call	0x312	; 0x312 <LED_Off>
 3b2:	2f ef       	ldi	r18, 0xFF	; 255
 3b4:	89 e6       	ldi	r24, 0x69	; 105
 3b6:	98 e1       	ldi	r25, 0x18	; 24
 3b8:	21 50       	subi	r18, 0x01	; 1
 3ba:	80 40       	sbci	r24, 0x00	; 0
 3bc:	90 40       	sbci	r25, 0x00	; 0
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <__vector_1+0x4a>
 3c0:	00 c0       	rjmp	.+0      	; 0x3c2 <__vector_1+0x54>
 3c2:	00 00       	nop
	_delay_ms(1000);
	LED_On(porta, pin7);
 3c4:	67 e0       	ldi	r22, 0x07	; 7
 3c6:	81 e4       	ldi	r24, 0x41	; 65
 3c8:	0e 94 85 01 	call	0x30a	; 0x30a <LED_On>
 3cc:	2f ef       	ldi	r18, 0xFF	; 255
 3ce:	89 e6       	ldi	r24, 0x69	; 105
 3d0:	98 e1       	ldi	r25, 0x18	; 24
 3d2:	21 50       	subi	r18, 0x01	; 1
 3d4:	80 40       	sbci	r24, 0x00	; 0
 3d6:	90 40       	sbci	r25, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <__vector_1+0x64>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <__vector_1+0x6e>
 3dc:	00 00       	nop
	_delay_ms(1000);
	LED_Off(porta, pin7);
 3de:	67 e0       	ldi	r22, 0x07	; 7
 3e0:	81 e4       	ldi	r24, 0x41	; 65
 3e2:	0e 94 89 01 	call	0x312	; 0x312 <LED_Off>
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	89 e6       	ldi	r24, 0x69	; 105
 3ea:	98 e1       	ldi	r25, 0x18	; 24
 3ec:	21 50       	subi	r18, 0x01	; 1
 3ee:	80 40       	sbci	r24, 0x00	; 0
 3f0:	90 40       	sbci	r25, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <__vector_1+0x7e>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <__vector_1+0x88>
 3f6:	00 00       	nop
	_delay_ms(1000);
	LED_On(porta, pin7);
 3f8:	67 e0       	ldi	r22, 0x07	; 7
 3fa:	81 e4       	ldi	r24, 0x41	; 65
 3fc:	0e 94 85 01 	call	0x30a	; 0x30a <LED_On>
 400:	2f ef       	ldi	r18, 0xFF	; 255
 402:	89 e6       	ldi	r24, 0x69	; 105
 404:	98 e1       	ldi	r25, 0x18	; 24
 406:	21 50       	subi	r18, 0x01	; 1
 408:	80 40       	sbci	r24, 0x00	; 0
 40a:	90 40       	sbci	r25, 0x00	; 0
 40c:	e1 f7       	brne	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	00 c0       	rjmp	.+0      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 410:	00 00       	nop
	_delay_ms(1000);
	LED_Off(porta, pin7);
 412:	67 e0       	ldi	r22, 0x07	; 7
 414:	81 e4       	ldi	r24, 0x41	; 65
 416:	0e 94 89 01 	call	0x312	; 0x312 <LED_Off>
 41a:	2f ef       	ldi	r18, 0xFF	; 255
 41c:	89 e6       	ldi	r24, 0x69	; 105
 41e:	98 e1       	ldi	r25, 0x18	; 24
 420:	21 50       	subi	r18, 0x01	; 1
 422:	80 40       	sbci	r24, 0x00	; 0
 424:	90 40       	sbci	r25, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
	_delay_ms(1000);
	// EXTI_vEnable(EXTI0);
}
 42c:	ff 91       	pop	r31
 42e:	ef 91       	pop	r30
 430:	bf 91       	pop	r27
 432:	af 91       	pop	r26
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	7f 91       	pop	r23
 43a:	6f 91       	pop	r22
 43c:	5f 91       	pop	r21
 43e:	4f 91       	pop	r20
 440:	3f 91       	pop	r19
 442:	2f 91       	pop	r18
 444:	0f 90       	pop	r0
 446:	0f be       	out	0x3f, r0	; 63
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <_exit>:
 44e:	f8 94       	cli

00000450 <__stop_program>:
 450:	ff cf       	rjmp	.-2      	; 0x450 <__stop_program>
