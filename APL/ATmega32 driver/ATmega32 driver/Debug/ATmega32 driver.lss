
ATmega32 driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c48  00000000  00000000  000005ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b4  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007d7  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  00002180  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e2  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008bd  00000000  00000000  0000282a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  000030e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_1>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b9 01 	call	0x372	; 0x372 <main>
  7a:	0c 94 f8 01 	jmp	0x3f0	; 0x3f0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPinDir>:
#include "Definitions.h"
#include "DIO_interface.h"
#include "DIO_registers.h"
void DIO_SetPinDir (uint8_t port,uint8_t pin, uint8_t dir)
{
	switch(port)
  82:	82 34       	cpi	r24, 0x42	; 66
  84:	19 f1       	breq	.+70     	; 0xcc <DIO_SetPinDir+0x4a>
  86:	18 f4       	brcc	.+6      	; 0x8e <DIO_SetPinDir+0xc>
  88:	81 34       	cpi	r24, 0x41	; 65
  8a:	39 f0       	breq	.+14     	; 0x9a <DIO_SetPinDir+0x18>
  8c:	08 95       	ret
  8e:	83 34       	cpi	r24, 0x43	; 67
  90:	b1 f1       	breq	.+108    	; 0xfe <DIO_SetPinDir+0x7c>
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_SetPinDir+0x16>
  96:	4c c0       	rjmp	.+152    	; 0x130 <DIO_SetPinDir+0xae>
  98:	08 95       	ret
	{
	    //portA
		case porta:
		if(dir==OUTPUT)
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	59 f4       	brne	.+22     	; 0xb4 <DIO_SetPinDir+0x32>
		{
			//DDRA|=(1<<pin);
			Bit_Set(DDRA,pin);
  9e:	2a b3       	in	r18, 0x1a	; 26
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	02 c0       	rjmp	.+4      	; 0xaa <DIO_SetPinDir+0x28>
  a6:	88 0f       	add	r24, r24
  a8:	99 1f       	adc	r25, r25
  aa:	6a 95       	dec	r22
  ac:	e2 f7       	brpl	.-8      	; 0xa6 <DIO_SetPinDir+0x24>
  ae:	82 2b       	or	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
  b2:	08 95       	ret
		}
		else
		{
			//DDRA&=~(1<<pin);
			Bit_Clear(DDRA,pin);
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_SetPinDir+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_SetPinDir+0x3a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
		}
		break;
		//portB
		case portb:
		if(dir==OUTPUT)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	59 f4       	brne	.+22     	; 0xe6 <DIO_SetPinDir+0x64>
		{
			//DDRB|=(1<<pin);
		    Bit_Set(DDRB,pin);
  d0:	27 b3       	in	r18, 0x17	; 23
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_SetPinDir+0x5a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_SetPinDir+0x56>
  e0:	82 2b       	or	r24, r18
  e2:	87 bb       	out	0x17, r24	; 23
  e4:	08 95       	ret
		}
		else
		{
			//DDRB&=~(1<<pin);
			Bit_Clear(DDRB,pin);
  e6:	27 b3       	in	r18, 0x17	; 23
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_SetPinDir+0x70>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	6a 95       	dec	r22
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_SetPinDir+0x6c>
  f6:	80 95       	com	r24
  f8:	82 23       	and	r24, r18
  fa:	87 bb       	out	0x17, r24	; 23
  fc:	08 95       	ret
		}
		break;
		//portC
		case portc:
		if(dir==OUTPUT)
  fe:	41 30       	cpi	r20, 0x01	; 1
 100:	59 f4       	brne	.+22     	; 0x118 <DIO_SetPinDir+0x96>
		{
			//DDRC|=(1<<pin);
			Bit_Set(DDRC,pin);
 102:	24 b3       	in	r18, 0x14	; 20
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_SetPinDir+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_SetPinDir+0x88>
 112:	82 2b       	or	r24, r18
 114:	84 bb       	out	0x14, r24	; 20
 116:	08 95       	ret
		}
		else
		{
			//DDRC&=~(1<<pin);
			Bit_Clear(DDRC,pin);
 118:	24 b3       	in	r18, 0x14	; 20
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_SetPinDir+0xa2>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	6a 95       	dec	r22
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_SetPinDir+0x9e>
 128:	80 95       	com	r24
 12a:	82 23       	and	r24, r18
 12c:	84 bb       	out	0x14, r24	; 20
 12e:	08 95       	ret
		}
		break;
		//portD
		case portd:
		if(dir==OUTPUT)
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	59 f4       	brne	.+22     	; 0x14a <DIO_SetPinDir+0xc8>
		{
			//DDRD|=(1<<pin);
			Bit_Set(DDRD,pin);
 134:	21 b3       	in	r18, 0x11	; 17
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinDir+0xbe>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinDir+0xba>
 144:	82 2b       	or	r24, r18
 146:	81 bb       	out	0x11, r24	; 17
 148:	08 95       	ret
		}
		else
		{
			//DDRD&=~(1<<pin);
			Bit_Clear(DDRD,pin);
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_SetPinDir+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_SetPinDir+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_WritePin>:
		break;
	}
}
void DIO_WritePin (uint8_t port,uint8_t pin, uint8_t val)
{
	switch(port)
 162:	82 34       	cpi	r24, 0x42	; 66
 164:	19 f1       	breq	.+70     	; 0x1ac <DIO_WritePin+0x4a>
 166:	18 f4       	brcc	.+6      	; 0x16e <DIO_WritePin+0xc>
 168:	81 34       	cpi	r24, 0x41	; 65
 16a:	39 f0       	breq	.+14     	; 0x17a <DIO_WritePin+0x18>
 16c:	08 95       	ret
 16e:	83 34       	cpi	r24, 0x43	; 67
 170:	b1 f1       	breq	.+108    	; 0x1de <DIO_WritePin+0x7c>
 172:	84 34       	cpi	r24, 0x44	; 68
 174:	09 f4       	brne	.+2      	; 0x178 <DIO_WritePin+0x16>
 176:	4c c0       	rjmp	.+152    	; 0x210 <DIO_WritePin+0xae>
 178:	08 95       	ret
	{
		//portA
		case porta:
		if(val==OUTPUT)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	59 f4       	brne	.+22     	; 0x194 <DIO_WritePin+0x32>
		{
			//PORTA|=(1<<pin);
			Bit_Set(PORTA,pin);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_WritePin+0x28>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_WritePin+0x24>
 18e:	82 2b       	or	r24, r18
 190:	8b bb       	out	0x1b, r24	; 27
 192:	08 95       	ret
		}
		else
		{
			//PORTA&=~(1<<pin);
			Bit_Clear(PORTA,pin);
 194:	2b b3       	in	r18, 0x1b	; 27
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_WritePin+0x3e>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_WritePin+0x3a>
 1a4:	80 95       	com	r24
 1a6:	82 23       	and	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
		}
		break;
		//portB
		case portb:
		if(val==OUTPUT)
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	59 f4       	brne	.+22     	; 0x1c6 <DIO_WritePin+0x64>
		{
			//PORTB|=(1<<pin);
			Bit_Set(PORTB,pin);
 1b0:	28 b3       	in	r18, 0x18	; 24
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_WritePin+0x5a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_WritePin+0x56>
 1c0:	82 2b       	or	r24, r18
 1c2:	88 bb       	out	0x18, r24	; 24
 1c4:	08 95       	ret
		}
		else
		{
			//PORTB&=~(1<<pin);
			Bit_Clear(PORTB,pin);
 1c6:	28 b3       	in	r18, 0x18	; 24
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_WritePin+0x70>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_WritePin+0x6c>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
		}
		break;
		//portC
		case portc:
		if(val==OUTPUT)
 1de:	41 30       	cpi	r20, 0x01	; 1
 1e0:	59 f4       	brne	.+22     	; 0x1f8 <DIO_WritePin+0x96>
		{
			//PORTC|=(1<<pin);
			Bit_Set(PORTC,pin);
 1e2:	25 b3       	in	r18, 0x15	; 21
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_WritePin+0x8c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_WritePin+0x88>
 1f2:	82 2b       	or	r24, r18
 1f4:	85 bb       	out	0x15, r24	; 21
 1f6:	08 95       	ret
		}
		else
		{
			//PORTC&=~(1<<pin);
			Bit_Clear(PORTC,pin);
 1f8:	25 b3       	in	r18, 0x15	; 21
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	02 c0       	rjmp	.+4      	; 0x204 <DIO_WritePin+0xa2>
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	6a 95       	dec	r22
 206:	e2 f7       	brpl	.-8      	; 0x200 <DIO_WritePin+0x9e>
 208:	80 95       	com	r24
 20a:	82 23       	and	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
		}
		break;
		//portD
		case portd:
		if(val==OUTPUT)
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	59 f4       	brne	.+22     	; 0x22a <DIO_WritePin+0xc8>
		{
			//PORTD|=(1<<pin);
			Bit_Set(PORTD,pin);
 214:	22 b3       	in	r18, 0x12	; 18
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_WritePin+0xbe>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_WritePin+0xba>
 224:	82 2b       	or	r24, r18
 226:	82 bb       	out	0x12, r24	; 18
 228:	08 95       	ret
		}
		else
		{
			//PORTD&=~(1<<pin);
			Bit_Clear(PORTD,pin);
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_WritePin+0xd4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_WritePin+0xd0>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret

00000242 <EXTI_vEnable>:
#include "EXTI_interface.h"


void EXTI_vEnable(unsigned char EXTI_PIN)
{
	switch(EXTI_PIN)
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	41 f0       	breq	.+16     	; 0x256 <EXTI_vEnable+0x14>
 246:	18 f0       	brcs	.+6      	; 0x24e <EXTI_vEnable+0xc>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	49 f0       	breq	.+18     	; 0x25e <EXTI_vEnable+0x1c>
 24c:	08 95       	ret
	{
		case 0:
		Bit_Set(GICR,INT0);
 24e:	8b b7       	in	r24, 0x3b	; 59
 250:	80 64       	ori	r24, 0x40	; 64
 252:	8b bf       	out	0x3b, r24	; 59
		break;
 254:	08 95       	ret
		case 1:
		Bit_Set(GICR,INT1);
 256:	8b b7       	in	r24, 0x3b	; 59
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8b bf       	out	0x3b, r24	; 59
		break;
 25c:	08 95       	ret
		case 2:
		Bit_Set(GICR,INT2);
 25e:	8b b7       	in	r24, 0x3b	; 59
 260:	80 62       	ori	r24, 0x20	; 32
 262:	8b bf       	out	0x3b, r24	; 59
 264:	08 95       	ret

00000266 <EXTI_vActiveMode>:
// RISING   0     	

void EXTI_vActiveMode(unsigned char EXTI_PIN,unsigned char EXTI_MODE)
{ 

	switch (EXTI_PIN)
 266:	81 30       	cpi	r24, 0x01	; 1
 268:	a9 f1       	breq	.+106    	; 0x2d4 <EXTI_vActiveMode+0x6e>
 26a:	20 f0       	brcs	.+8      	; 0x274 <EXTI_vActiveMode+0xe>
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	09 f4       	brne	.+2      	; 0x272 <EXTI_vActiveMode+0xc>
 270:	61 c0       	rjmp	.+194    	; 0x334 <EXTI_vActiveMode+0xce>
 272:	08 95       	ret
	{
	case EXTI0:
		switch (EXTI_MODE)
 274:	61 30       	cpi	r22, 0x01	; 1
 276:	21 f1       	breq	.+72     	; 0x2c0 <EXTI_vActiveMode+0x5a>
 278:	c8 f0       	brcs	.+50     	; 0x2ac <EXTI_vActiveMode+0x46>
 27a:	62 30       	cpi	r22, 0x02	; 2
 27c:	19 f0       	breq	.+6      	; 0x284 <EXTI_vActiveMode+0x1e>
 27e:	63 30       	cpi	r22, 0x03	; 3
 280:	59 f0       	breq	.+22     	; 0x298 <EXTI_vActiveMode+0x32>
 282:	08 95       	ret
		{
			case LOW:
				Bit_Set(SREG, GIE);
 284:	8f b7       	in	r24, 0x3f	; 63
 286:	80 68       	ori	r24, 0x80	; 128
 288:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCR, ISC00);
 28a:	85 b7       	in	r24, 0x35	; 53
 28c:	8e 7f       	andi	r24, 0xFE	; 254
 28e:	85 bf       	out	0x35, r24	; 53
				Bit_Clear(MCUCR, ISC01);
 290:	85 b7       	in	r24, 0x35	; 53
 292:	8d 7f       	andi	r24, 0xFD	; 253
 294:	85 bf       	out	0x35, r24	; 53
				break;
 296:	08 95       	ret
			case CHANGE:
				Bit_Set(SREG, GIE);
 298:	8f b7       	in	r24, 0x3f	; 63
 29a:	80 68       	ori	r24, 0x80	; 128
 29c:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC00);
 29e:	85 b7       	in	r24, 0x35	; 53
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	85 bf       	out	0x35, r24	; 53
				Bit_Clear(MCUCR, ISC01);
 2a4:	85 b7       	in	r24, 0x35	; 53
 2a6:	8d 7f       	andi	r24, 0xFD	; 253
 2a8:	85 bf       	out	0x35, r24	; 53
				break;
 2aa:	08 95       	ret
			case FALLING:
				Bit_Set(SREG, GIE);
 2ac:	8f b7       	in	r24, 0x3f	; 63
 2ae:	80 68       	ori	r24, 0x80	; 128
 2b0:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCR, ISC00);
 2b2:	85 b7       	in	r24, 0x35	; 53
 2b4:	8e 7f       	andi	r24, 0xFE	; 254
 2b6:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC01);
 2b8:	85 b7       	in	r24, 0x35	; 53
 2ba:	82 60       	ori	r24, 0x02	; 2
 2bc:	85 bf       	out	0x35, r24	; 53
				break;
 2be:	08 95       	ret
			case RISING:
				Bit_Set(SREG, GIE);
 2c0:	8f b7       	in	r24, 0x3f	; 63
 2c2:	80 68       	ori	r24, 0x80	; 128
 2c4:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC00);
 2c6:	85 b7       	in	r24, 0x35	; 53
 2c8:	81 60       	ori	r24, 0x01	; 1
 2ca:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC01);
 2cc:	85 b7       	in	r24, 0x35	; 53
 2ce:	82 60       	ori	r24, 0x02	; 2
 2d0:	85 bf       	out	0x35, r24	; 53
				break;
 2d2:	08 95       	ret
			default:
				break;
		}
		break;
	case EXTI1:
		switch (EXTI_MODE)
 2d4:	61 30       	cpi	r22, 0x01	; 1
 2d6:	21 f1       	breq	.+72     	; 0x320 <EXTI_vActiveMode+0xba>
 2d8:	c8 f0       	brcs	.+50     	; 0x30c <EXTI_vActiveMode+0xa6>
 2da:	62 30       	cpi	r22, 0x02	; 2
 2dc:	19 f0       	breq	.+6      	; 0x2e4 <EXTI_vActiveMode+0x7e>
 2de:	63 30       	cpi	r22, 0x03	; 3
 2e0:	59 f0       	breq	.+22     	; 0x2f8 <EXTI_vActiveMode+0x92>
 2e2:	08 95       	ret
		{
			case LOW:
				Bit_Set(SREG, GIE);
 2e4:	8f b7       	in	r24, 0x3f	; 63
 2e6:	80 68       	ori	r24, 0x80	; 128
 2e8:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCR, ISC10);
 2ea:	85 b7       	in	r24, 0x35	; 53
 2ec:	8b 7f       	andi	r24, 0xFB	; 251
 2ee:	85 bf       	out	0x35, r24	; 53
				Bit_Clear(MCUCR, ISC11);
 2f0:	85 b7       	in	r24, 0x35	; 53
 2f2:	87 7f       	andi	r24, 0xF7	; 247
 2f4:	85 bf       	out	0x35, r24	; 53
				break;
 2f6:	08 95       	ret
			case CHANGE:
				Bit_Set(SREG, GIE);
 2f8:	8f b7       	in	r24, 0x3f	; 63
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC10);
 2fe:	85 b7       	in	r24, 0x35	; 53
 300:	84 60       	ori	r24, 0x04	; 4
 302:	85 bf       	out	0x35, r24	; 53
				Bit_Clear(MCUCR, ISC11);
 304:	85 b7       	in	r24, 0x35	; 53
 306:	87 7f       	andi	r24, 0xF7	; 247
 308:	85 bf       	out	0x35, r24	; 53
				break;
 30a:	08 95       	ret
			case FALLING:
				Bit_Set(SREG, GIE);
 30c:	8f b7       	in	r24, 0x3f	; 63
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCR, ISC10);
 312:	85 b7       	in	r24, 0x35	; 53
 314:	8b 7f       	andi	r24, 0xFB	; 251
 316:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC11);
 318:	85 b7       	in	r24, 0x35	; 53
 31a:	88 60       	ori	r24, 0x08	; 8
 31c:	85 bf       	out	0x35, r24	; 53
				break;
 31e:	08 95       	ret
			case RISING:
				Bit_Set(SREG, GIE);
 320:	8f b7       	in	r24, 0x3f	; 63
 322:	80 68       	ori	r24, 0x80	; 128
 324:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCR, ISC10);
 326:	85 b7       	in	r24, 0x35	; 53
 328:	84 60       	ori	r24, 0x04	; 4
 32a:	85 bf       	out	0x35, r24	; 53
				Bit_Set(MCUCR, ISC11);
 32c:	85 b7       	in	r24, 0x35	; 53
 32e:	88 60       	ori	r24, 0x08	; 8
 330:	85 bf       	out	0x35, r24	; 53
				break;
 332:	08 95       	ret
			default:
				break;
		}
		break;
	case EXTI2:
		switch (EXTI_MODE)
 334:	66 23       	and	r22, r22
 336:	19 f0       	breq	.+6      	; 0x33e <EXTI_vActiveMode+0xd8>
 338:	61 30       	cpi	r22, 0x01	; 1
 33a:	41 f0       	breq	.+16     	; 0x34c <EXTI_vActiveMode+0xe6>
 33c:	08 95       	ret
		{
			case FALLING:
				Bit_Set(SREG, GIE);
 33e:	8f b7       	in	r24, 0x3f	; 63
 340:	80 68       	ori	r24, 0x80	; 128
 342:	8f bf       	out	0x3f, r24	; 63
				Bit_Set(MCUCSR, ISC2);
 344:	84 b7       	in	r24, 0x34	; 52
 346:	80 64       	ori	r24, 0x40	; 64
 348:	84 bf       	out	0x34, r24	; 52
				break;
 34a:	08 95       	ret
			case RISING:
				Bit_Set(SREG, GIE);
 34c:	8f b7       	in	r24, 0x3f	; 63
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	8f bf       	out	0x3f, r24	; 63
				Bit_Clear(MCUCSR, ISC2);
 352:	84 b7       	in	r24, 0x34	; 52
 354:	8f 7b       	andi	r24, 0xBF	; 191
 356:	84 bf       	out	0x34, r24	; 52
 358:	08 95       	ret

0000035a <LED_Init>:
/**********************************************************************************************/
#include "DIO_interface.h"
#include "Definitions.h"
void LED_Init(uint8_t port,uint8_t pin)
{
	DIO_SetPinDir(port,pin,OUTPUT);
 35a:	41 e0       	ldi	r20, 0x01	; 1
 35c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPinDir>
 360:	08 95       	ret

00000362 <LED_On>:
}
void LED_On(uint8_t port,uint8_t pin)
{
	DIO_WritePin(port,pin,1);
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 368:	08 95       	ret

0000036a <LED_Off>:
}
void LED_Off(uint8_t port,uint8_t pin)
{
	DIO_WritePin(port,pin,0);
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_WritePin>
 370:	08 95       	ret

00000372 <main>:
#include "EXTI_interface.h"


int main(void)
{
	LED_Init(portc, pin1);
 372:	61 e0       	ldi	r22, 0x01	; 1
 374:	83 e4       	ldi	r24, 0x43	; 67
 376:	0e 94 ad 01 	call	0x35a	; 0x35a <LED_Init>
	//LED_Init(porta, pin7);
	EXTI_vEnable(EXTI0);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	0e 94 21 01 	call	0x242	; 0x242 <EXTI_vEnable>
	// EXTI_vActiveMode(EXTI0, LOW);
	EXTI_vActiveMode(EXTI0, CHANGE);
 380:	63 e0       	ldi	r22, 0x03	; 3
 382:	80 e0       	ldi	r24, 0x00	; 0
 384:	0e 94 33 01 	call	0x266	; 0x266 <EXTI_vActiveMode>
	// EXTI_vActiveMode(EXTI0, FALLING);
	// EXTI_vActiveMode(EXTI0, RISING);
    while (1) 
    {
		LED_On(portc, pin1);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	83 e4       	ldi	r24, 0x43	; 67
 38c:	0e 94 b1 01 	call	0x362	; 0x362 <LED_On>
 390:	fb cf       	rjmp	.-10     	; 0x388 <main+0x16>

00000392 <__vector_1>:
	}
}

ISR(INT0_vect)
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	ef 93       	push	r30
 3b2:	ff 93       	push	r31
	// EXTI_vDisable(EXTI0);
	LED_Off(portc, pin1);
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	83 e4       	ldi	r24, 0x43	; 67
 3b8:	0e 94 b5 01 	call	0x36a	; 0x36a <LED_Off>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	8d e3       	ldi	r24, 0x3D	; 61
 3c0:	99 e4       	ldi	r25, 0x49	; 73
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	80 40       	sbci	r24, 0x00	; 0
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <__vector_1+0x30>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <__vector_1+0x3a>
 3cc:	00 00       	nop
	_delay_ms(3000);
	// EXTI_vEnable(EXTI0);
}
 3ce:	ff 91       	pop	r31
 3d0:	ef 91       	pop	r30
 3d2:	bf 91       	pop	r27
 3d4:	af 91       	pop	r26
 3d6:	9f 91       	pop	r25
 3d8:	8f 91       	pop	r24
 3da:	7f 91       	pop	r23
 3dc:	6f 91       	pop	r22
 3de:	5f 91       	pop	r21
 3e0:	4f 91       	pop	r20
 3e2:	3f 91       	pop	r19
 3e4:	2f 91       	pop	r18
 3e6:	0f 90       	pop	r0
 3e8:	0f be       	out	0x3f, r0	; 63
 3ea:	0f 90       	pop	r0
 3ec:	1f 90       	pop	r1
 3ee:	18 95       	reti

000003f0 <_exit>:
 3f0:	f8 94       	cli

000003f2 <__stop_program>:
 3f2:	ff cf       	rjmp	.-2      	; 0x3f2 <__stop_program>
