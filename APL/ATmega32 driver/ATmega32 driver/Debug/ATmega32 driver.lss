
ATmega32 driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000001c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000674  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a8  00000000  00000000  000008ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000026f  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000036a  00000000  00000000  0000115c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000103  00000000  00000000  000014c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000015c9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8a:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
#include "ADC_interface.h"
#include "Definitions.h"
void           ADC_Init(unsigned char pin)
{
	 /*ADC_INIT*/
	Bit_Set(ADMUX,REFS0); //AVCC with external capacitor at AREF pin
  92:	97 b1       	in	r25, 0x07	; 7
  94:	90 64       	ori	r25, 0x40	; 64
  96:	97 b9       	out	0x07, r25	; 7
	/* configure channel */
	if(pin == 0) // channel 0
  98:	88 23       	and	r24, r24
  9a:	b1 f1       	breq	.+108    	; 0x108 <ADC_Init+0x76>
	 {
		 
	 }
	 else if(pin == 1)  // channel 1
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	21 f4       	brne	.+8      	; 0xa8 <ADC_Init+0x16>
	 {
		 Bit_Set(ADMUX,MUX0); 
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	87 b9       	out	0x07, r24	; 7
  a6:	30 c0       	rjmp	.+96     	; 0x108 <ADC_Init+0x76>
	 }
	 else if(pin == 2)  // channel 2
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	21 f4       	brne	.+8      	; 0xb4 <ADC_Init+0x22>
	 {
		 Bit_Set(ADMUX,MUX1); 
  ac:	87 b1       	in	r24, 0x07	; 7
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	87 b9       	out	0x07, r24	; 7
  b2:	2a c0       	rjmp	.+84     	; 0x108 <ADC_Init+0x76>
	 }
	 else if(pin == 3)  // channel 3
  b4:	83 30       	cpi	r24, 0x03	; 3
  b6:	39 f4       	brne	.+14     	; 0xc6 <ADC_Init+0x34>
	 {
		 Bit_Set(ADMUX,MUX0); 
  b8:	87 b1       	in	r24, 0x07	; 7
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	87 b9       	out	0x07, r24	; 7
		 Bit_Set(ADMUX,MUX1); 
  be:	87 b1       	in	r24, 0x07	; 7
  c0:	82 60       	ori	r24, 0x02	; 2
  c2:	87 b9       	out	0x07, r24	; 7
  c4:	21 c0       	rjmp	.+66     	; 0x108 <ADC_Init+0x76>
	 }
	 else if(pin == 4)  // channel 4
  c6:	84 30       	cpi	r24, 0x04	; 4
  c8:	21 f4       	brne	.+8      	; 0xd2 <ADC_Init+0x40>
	 {
		 Bit_Set(ADMUX,MUX2); 
  ca:	87 b1       	in	r24, 0x07	; 7
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	87 b9       	out	0x07, r24	; 7
  d0:	1b c0       	rjmp	.+54     	; 0x108 <ADC_Init+0x76>
	 }
	 else if(pin == 5)  // channel 5
  d2:	85 30       	cpi	r24, 0x05	; 5
  d4:	39 f4       	brne	.+14     	; 0xe4 <ADC_Init+0x52>
	 {
		 Bit_Set(ADMUX,MUX0); 
  d6:	87 b1       	in	r24, 0x07	; 7
  d8:	81 60       	ori	r24, 0x01	; 1
  da:	87 b9       	out	0x07, r24	; 7
		 Bit_Set(ADMUX,MUX2); 
  dc:	87 b1       	in	r24, 0x07	; 7
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	87 b9       	out	0x07, r24	; 7
  e2:	12 c0       	rjmp	.+36     	; 0x108 <ADC_Init+0x76>
	 }
	 else if(pin == 6)  // channel 6
  e4:	86 30       	cpi	r24, 0x06	; 6
  e6:	39 f4       	brne	.+14     	; 0xf6 <ADC_Init+0x64>
	 {
		 Bit_Set(ADMUX,MUX1);
  e8:	87 b1       	in	r24, 0x07	; 7
  ea:	82 60       	ori	r24, 0x02	; 2
  ec:	87 b9       	out	0x07, r24	; 7
         Bit_Set(ADMUX,MUX2); 		 
  ee:	87 b1       	in	r24, 0x07	; 7
  f0:	84 60       	ori	r24, 0x04	; 4
  f2:	87 b9       	out	0x07, r24	; 7
  f4:	09 c0       	rjmp	.+18     	; 0x108 <ADC_Init+0x76>
	 } 
	 else   // channel 7
	 {
		  Bit_Set(ADMUX,MUX0); 
  f6:	87 b1       	in	r24, 0x07	; 7
  f8:	81 60       	ori	r24, 0x01	; 1
  fa:	87 b9       	out	0x07, r24	; 7
		  Bit_Set(ADMUX,MUX1); 
  fc:	87 b1       	in	r24, 0x07	; 7
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	87 b9       	out	0x07, r24	; 7
		  Bit_Set(ADMUX,MUX2); 
 102:	87 b1       	in	r24, 0x07	; 7
 104:	84 60       	ori	r24, 0x04	; 4
 106:	87 b9       	out	0x07, r24	; 7
	 }
	Bit_Set(ADCSRA,ADEN); //Enable ADC
 108:	86 b1       	in	r24, 0x06	; 6
 10a:	80 68       	ori	r24, 0x80	; 128
 10c:	86 b9       	out	0x06, r24	; 6
	/*SET clock of ADC,ADPS0 default zero*/
	Bit_Set(ADCSRA,ADPS2);
 10e:	86 b1       	in	r24, 0x06	; 6
 110:	84 60       	ori	r24, 0x04	; 4
 112:	86 b9       	out	0x06, r24	; 6
	Bit_Set(ADCSRA,ADPS1);
 114:	86 b1       	in	r24, 0x06	; 6
 116:	82 60       	ori	r24, 0x02	; 2
 118:	86 b9       	out	0x06, r24	; 6
 11a:	08 95       	ret

0000011c <ADC_Read>:
	/*ADC_END_INIT*/
}
unsigned short ADC_Read(unsigned char pin)
{
	unsigned short read_value;
	Bit_Set(ADCSRA,ADSC); //start conversion ADC
 11c:	86 b1       	in	r24, 0x06	; 6
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	86 b9       	out	0x06, r24	; 6
	while(Bit_Read(ADCSRA,ADSC)==1);
 122:	36 99       	sbic	0x06, 6	; 6
 124:	fe cf       	rjmp	.-4      	; 0x122 <ADC_Read+0x6>
	//while(Bit_Read(ADCSRA,ADIF)==0);
	//Bit_Set(ADCSRA,ADIF); //clear flag of ADC
	read_value=ADCL;
 126:	24 b1       	in	r18, 0x04	; 4
	read_value|=(ADCH<<8);
 128:	85 b1       	in	r24, 0x05	; 5
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	98 2f       	mov	r25, r24
 12e:	88 27       	eor	r24, r24
	return read_value;
 130:	82 2b       	or	r24, r18
 132:	08 95       	ret

00000134 <main>:
unsigned short read_value;


int main(void)
{
	ADC_Init(0);
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	
    while (1) 
    {
		read_value = ADC_Read(0);
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 8e 00 	call	0x11c	; 0x11c <ADC_Read>
 140:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 144:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 148:	f8 cf       	rjmp	.-16     	; 0x13a <main+0x6>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
